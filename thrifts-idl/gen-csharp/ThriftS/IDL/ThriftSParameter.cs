/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftS.IDL
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ThriftSParameter : TBase
  {
    private byte[] _Value;

    public sbyte Index { get; set; }

    public string Name { get; set; }

    public string Type { get; set; }

    public string ContentType { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="ThriftSCompression"/>
    /// </summary>
    public ThriftSCompression Compression { get; set; }

    public bool HasValue { get; set; }

    public byte[] Value
    {
      get
      {
        return _Value;
      }
      set
      {
        __isset.@Value = true;
        this._Value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool @Value;
    }

    public ThriftSParameter() {
      this.Compression = ThriftSCompression.None;
      this.HasValue = true;
    }

    public ThriftSParameter(sbyte Index, string Name, string Type, string ContentType, ThriftSCompression Compression, bool HasValue) : this() {
      this.Index = Index;
      this.Name = Name;
      this.Type = Type;
      this.ContentType = ContentType;
      this.Compression = Compression;
      this.HasValue = HasValue;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_Index = false;
      bool isset_Name = false;
      bool isset_Type = false;
      bool isset_ContentType = false;
      bool isset_Compression = false;
      bool isset_HasValue = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Byte) {
              Index = iprot.ReadByte();
              isset_Index = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
              isset_Name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Type = iprot.ReadString();
              isset_Type = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              ContentType = iprot.ReadString();
              isset_ContentType = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Compression = (ThriftSCompression)iprot.ReadI32();
              isset_Compression = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              HasValue = iprot.ReadBool();
              isset_HasValue = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Value = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Index)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Name)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Type)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_ContentType)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Compression)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_HasValue)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ThriftSParameter");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "Index";
      field.Type = TType.Byte;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteByte(Index);
      oprot.WriteFieldEnd();
      field.Name = "Name";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Name);
      oprot.WriteFieldEnd();
      field.Name = "Type";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Type);
      oprot.WriteFieldEnd();
      field.Name = "ContentType";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ContentType);
      oprot.WriteFieldEnd();
      field.Name = "Compression";
      field.Type = TType.I32;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Compression);
      oprot.WriteFieldEnd();
      field.Name = "HasValue";
      field.Type = TType.Bool;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(HasValue);
      oprot.WriteFieldEnd();
      if (Value != null && __isset.@Value) {
        field.Name = "Value";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Value);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ThriftSParameter(");
      __sb.Append(", Index: ");
      __sb.Append(Index);
      __sb.Append(", Name: ");
      __sb.Append(Name);
      __sb.Append(", Type: ");
      __sb.Append(Type);
      __sb.Append(", ContentType: ");
      __sb.Append(ContentType);
      __sb.Append(", Compression: ");
      __sb.Append(Compression);
      __sb.Append(", HasValue: ");
      __sb.Append(HasValue);
      if (Value != null && __isset.@Value) {
        __sb.Append(", Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
