/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftS.IDL
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ThriftSResponse : TBase
  {
    private ThriftSResult _Result;

    public Dictionary<string, string> Headers { get; set; }

    public ThriftSResult Result
    {
      get
      {
        return _Result;
      }
      set
      {
        __isset.Result = true;
        this._Result = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Result;
    }

    public ThriftSResponse() {
    }

    public ThriftSResponse(Dictionary<string, string> Headers) : this() {
      this.Headers = Headers;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_Headers = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Headers = new Dictionary<string, string>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  string _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadString();
                  Headers[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
              isset_Headers = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Result = new ThriftSResult();
              Result.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Headers)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ThriftSResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "Headers";
      field.Type = TType.Map;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Headers.Count));
        foreach (string _iter4 in Headers.Keys)
        {
          oprot.WriteString(_iter4);
          oprot.WriteString(Headers[_iter4]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      if (Result != null && __isset.Result) {
        field.Name = "Result";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Result.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ThriftSResponse(");
      __sb.Append(", Headers: ");
      __sb.Append(Headers);
      if (Result != null && __isset.Result) {
        __sb.Append(", Result: ");
        __sb.Append(Result== null ? "<null>" : Result.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
