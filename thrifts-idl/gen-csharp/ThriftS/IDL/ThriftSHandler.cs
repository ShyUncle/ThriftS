/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftS.IDL
{
  public partial class ThriftSHandler {
    public interface Iface {
      ThriftS.IDL.ThriftSResponse Ping(ThriftS.IDL.ThriftSRequest request);
      #if SILVERLIGHT
      IAsyncResult Begin_Ping(AsyncCallback callback, object state, ThriftS.IDL.ThriftSRequest request);
      ThriftS.IDL.ThriftSResponse End_Ping(IAsyncResult asyncResult);
      #endif
      ThriftS.IDL.ThriftSResponse Hello(ThriftS.IDL.ThriftSRequest request);
      #if SILVERLIGHT
      IAsyncResult Begin_Hello(AsyncCallback callback, object state, ThriftS.IDL.ThriftSRequest request);
      ThriftS.IDL.ThriftSResponse End_Hello(IAsyncResult asyncResult);
      #endif
      ThriftS.IDL.ThriftSResponse Process(ThriftS.IDL.ThriftSRequest request);
      #if SILVERLIGHT
      IAsyncResult Begin_Process(AsyncCallback callback, object state, ThriftS.IDL.ThriftSRequest request);
      ThriftS.IDL.ThriftSResponse End_Process(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Ping(AsyncCallback callback, object state, ThriftS.IDL.ThriftSRequest request)
      {
        return send_Ping(callback, state, request);
      }

      public ThriftS.IDL.ThriftSResponse End_Ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Ping();
      }

      #endif

      public ThriftS.IDL.ThriftSResponse Ping(ThriftS.IDL.ThriftSRequest request)
      {
        #if !SILVERLIGHT
        send_Ping(request);
        return recv_Ping();

        #else
        var asyncResult = Begin_Ping(null, null, request);
        return End_Ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Ping(AsyncCallback callback, object state, ThriftS.IDL.ThriftSRequest request)
      #else
      public void send_Ping(ThriftS.IDL.ThriftSRequest request)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Ping", TMessageType.Call, seqid_));
        Ping_args args = new Ping_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ThriftS.IDL.ThriftSResponse recv_Ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Ping_result result = new Ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.badRequestException) {
          throw result.BadRequestException;
        }
        if (result.__isset.internalServerException) {
          throw result.InternalServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ping failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Hello(AsyncCallback callback, object state, ThriftS.IDL.ThriftSRequest request)
      {
        return send_Hello(callback, state, request);
      }

      public ThriftS.IDL.ThriftSResponse End_Hello(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Hello();
      }

      #endif

      public ThriftS.IDL.ThriftSResponse Hello(ThriftS.IDL.ThriftSRequest request)
      {
        #if !SILVERLIGHT
        send_Hello(request);
        return recv_Hello();

        #else
        var asyncResult = Begin_Hello(null, null, request);
        return End_Hello(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Hello(AsyncCallback callback, object state, ThriftS.IDL.ThriftSRequest request)
      #else
      public void send_Hello(ThriftS.IDL.ThriftSRequest request)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Hello", TMessageType.Call, seqid_));
        Hello_args args = new Hello_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ThriftS.IDL.ThriftSResponse recv_Hello()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Hello_result result = new Hello_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.badRequestException) {
          throw result.BadRequestException;
        }
        if (result.__isset.internalServerException) {
          throw result.InternalServerException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Hello failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Process(AsyncCallback callback, object state, ThriftS.IDL.ThriftSRequest request)
      {
        return send_Process(callback, state, request);
      }

      public ThriftS.IDL.ThriftSResponse End_Process(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Process();
      }

      #endif

      public ThriftS.IDL.ThriftSResponse Process(ThriftS.IDL.ThriftSRequest request)
      {
        #if !SILVERLIGHT
        send_Process(request);
        return recv_Process();

        #else
        var asyncResult = Begin_Process(null, null, request);
        return End_Process(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Process(AsyncCallback callback, object state, ThriftS.IDL.ThriftSRequest request)
      #else
      public void send_Process(ThriftS.IDL.ThriftSRequest request)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Process", TMessageType.Call, seqid_));
        Process_args args = new Process_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ThriftS.IDL.ThriftSResponse recv_Process()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Process_result result = new Process_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.badRequestException) {
          throw result.BadRequestException;
        }
        if (result.__isset.internalServerException) {
          throw result.InternalServerException;
        }
        if (result.__isset.invocationException) {
          throw result.InvocationException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Process failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Ping"] = Ping_Process;
        processMap_["Hello"] = Hello_Process;
        processMap_["Process"] = Process_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Ping_args args = new Ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Ping_result result = new Ping_result();
        try {
          result.Success = iface_.Ping(args.Request);
        } catch (ThriftS.IDL.BadRequestException badRequestException) {
          result.BadRequestException = badRequestException;
        } catch (ThriftS.IDL.InternalServerException internalServerException) {
          result.InternalServerException = internalServerException;
        }
        oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Hello_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Hello_args args = new Hello_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Hello_result result = new Hello_result();
        try {
          result.Success = iface_.Hello(args.Request);
        } catch (ThriftS.IDL.BadRequestException badRequestException) {
          result.BadRequestException = badRequestException;
        } catch (ThriftS.IDL.InternalServerException internalServerException) {
          result.InternalServerException = internalServerException;
        }
        oprot.WriteMessageBegin(new TMessage("Hello", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Process_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Process_args args = new Process_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Process_result result = new Process_result();
        try {
          result.Success = iface_.Process(args.Request);
        } catch (ThriftS.IDL.BadRequestException badRequestException) {
          result.BadRequestException = badRequestException;
        } catch (ThriftS.IDL.InternalServerException internalServerException) {
          result.InternalServerException = internalServerException;
        } catch (ThriftS.IDL.InvocationException invocationException) {
          result.InvocationException = invocationException;
        }
        oprot.WriteMessageBegin(new TMessage("Process", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_args : TBase
    {
      private ThriftS.IDL.ThriftSRequest _request;

      public ThriftS.IDL.ThriftSRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public Ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new ThriftS.IDL.ThriftSRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Ping_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_result : TBase
    {
      private ThriftS.IDL.ThriftSResponse _success;
      private ThriftS.IDL.BadRequestException _badRequestException;
      private ThriftS.IDL.InternalServerException _internalServerException;

      public ThriftS.IDL.ThriftSResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ThriftS.IDL.BadRequestException BadRequestException
      {
        get
        {
          return _badRequestException;
        }
        set
        {
          __isset.badRequestException = true;
          this._badRequestException = value;
        }
      }

      public ThriftS.IDL.InternalServerException InternalServerException
      {
        get
        {
          return _internalServerException;
        }
        set
        {
          __isset.internalServerException = true;
          this._internalServerException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool badRequestException;
        public bool internalServerException;
      }

      public Ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ThriftS.IDL.ThriftSResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BadRequestException = new ThriftS.IDL.BadRequestException();
                BadRequestException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                InternalServerException = new ThriftS.IDL.InternalServerException();
                InternalServerException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Ping_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.badRequestException) {
          if (BadRequestException != null) {
            field.Name = "BadRequestException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BadRequestException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.internalServerException) {
          if (InternalServerException != null) {
            field.Name = "InternalServerException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            InternalServerException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Ping_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (BadRequestException != null && __isset.badRequestException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("BadRequestException: ");
          __sb.Append(BadRequestException== null ? "<null>" : BadRequestException.ToString());
        }
        if (InternalServerException != null && __isset.internalServerException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InternalServerException: ");
          __sb.Append(InternalServerException== null ? "<null>" : InternalServerException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Hello_args : TBase
    {
      private ThriftS.IDL.ThriftSRequest _request;

      public ThriftS.IDL.ThriftSRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public Hello_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new ThriftS.IDL.ThriftSRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Hello_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Hello_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Hello_result : TBase
    {
      private ThriftS.IDL.ThriftSResponse _success;
      private ThriftS.IDL.BadRequestException _badRequestException;
      private ThriftS.IDL.InternalServerException _internalServerException;

      public ThriftS.IDL.ThriftSResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ThriftS.IDL.BadRequestException BadRequestException
      {
        get
        {
          return _badRequestException;
        }
        set
        {
          __isset.badRequestException = true;
          this._badRequestException = value;
        }
      }

      public ThriftS.IDL.InternalServerException InternalServerException
      {
        get
        {
          return _internalServerException;
        }
        set
        {
          __isset.internalServerException = true;
          this._internalServerException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool badRequestException;
        public bool internalServerException;
      }

      public Hello_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ThriftS.IDL.ThriftSResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BadRequestException = new ThriftS.IDL.BadRequestException();
                BadRequestException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                InternalServerException = new ThriftS.IDL.InternalServerException();
                InternalServerException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Hello_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.badRequestException) {
          if (BadRequestException != null) {
            field.Name = "BadRequestException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BadRequestException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.internalServerException) {
          if (InternalServerException != null) {
            field.Name = "InternalServerException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            InternalServerException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Hello_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (BadRequestException != null && __isset.badRequestException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("BadRequestException: ");
          __sb.Append(BadRequestException== null ? "<null>" : BadRequestException.ToString());
        }
        if (InternalServerException != null && __isset.internalServerException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InternalServerException: ");
          __sb.Append(InternalServerException== null ? "<null>" : InternalServerException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Process_args : TBase
    {
      private ThriftS.IDL.ThriftSRequest _request;

      public ThriftS.IDL.ThriftSRequest Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public Process_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new ThriftS.IDL.ThriftSRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Process_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Process_args(");
        bool __first = true;
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Process_result : TBase
    {
      private ThriftS.IDL.ThriftSResponse _success;
      private ThriftS.IDL.BadRequestException _badRequestException;
      private ThriftS.IDL.InternalServerException _internalServerException;
      private ThriftS.IDL.InvocationException _invocationException;

      public ThriftS.IDL.ThriftSResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ThriftS.IDL.BadRequestException BadRequestException
      {
        get
        {
          return _badRequestException;
        }
        set
        {
          __isset.badRequestException = true;
          this._badRequestException = value;
        }
      }

      public ThriftS.IDL.InternalServerException InternalServerException
      {
        get
        {
          return _internalServerException;
        }
        set
        {
          __isset.internalServerException = true;
          this._internalServerException = value;
        }
      }

      public ThriftS.IDL.InvocationException InvocationException
      {
        get
        {
          return _invocationException;
        }
        set
        {
          __isset.invocationException = true;
          this._invocationException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool badRequestException;
        public bool internalServerException;
        public bool invocationException;
      }

      public Process_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ThriftS.IDL.ThriftSResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                BadRequestException = new ThriftS.IDL.BadRequestException();
                BadRequestException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                InternalServerException = new ThriftS.IDL.InternalServerException();
                InternalServerException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                InvocationException = new ThriftS.IDL.InvocationException();
                InvocationException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Process_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.badRequestException) {
          if (BadRequestException != null) {
            field.Name = "BadRequestException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            BadRequestException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.internalServerException) {
          if (InternalServerException != null) {
            field.Name = "InternalServerException";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            InternalServerException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.invocationException) {
          if (InvocationException != null) {
            field.Name = "InvocationException";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            InvocationException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Process_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (BadRequestException != null && __isset.badRequestException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("BadRequestException: ");
          __sb.Append(BadRequestException== null ? "<null>" : BadRequestException.ToString());
        }
        if (InternalServerException != null && __isset.internalServerException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InternalServerException: ");
          __sb.Append(InternalServerException== null ? "<null>" : InternalServerException.ToString());
        }
        if (InvocationException != null && __isset.invocationException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InvocationException: ");
          __sb.Append(InvocationException== null ? "<null>" : InvocationException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
