/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ThriftS.IDL
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BadRequestException : TException, TBase
  {

    public ThriftS.IDL.ThriftSRequest Request { get; set; }

    public string ErrorMessage { get; set; }

    public BadRequestException() {
    }

    public BadRequestException(ThriftS.IDL.ThriftSRequest Request, string ErrorMessage) : this() {
      this.Request = Request;
      this.ErrorMessage = ErrorMessage;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_Request = false;
      bool isset_ErrorMessage = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Request = new ThriftS.IDL.ThriftSRequest();
              Request.Read(iprot);
              isset_Request = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ErrorMessage = iprot.ReadString();
              isset_ErrorMessage = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Request)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_ErrorMessage)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BadRequestException");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "Request";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Request.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "ErrorMessage";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ErrorMessage);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BadRequestException(");
      __sb.Append(", Request: ");
      __sb.Append(Request== null ? "<null>" : Request.ToString());
      __sb.Append(", ErrorMessage: ");
      __sb.Append(ErrorMessage);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
